class <%= @migration_class_name %> < ActiveRecord::Migration
  def up
    execute <<~SQL
      DO $$
        BEGIN
        EXECUTE 'ALTER DATABASE ' || current_database() || ' SET logidze.disabled TO off';
        END;
      $$
      LANGUAGE plpgsql;
    SQL

    execute <<~SQL
      CREATE OR REPLACE FUNCTION jsonb_minus(arg1 jsonb, arg2 jsonb) RETURNS jsonb
        AS $$

        SELECT 
          COALESCE(json_object_agg(key, value), '{}')::jsonb
        FROM 
          jsonb_each(arg1)
        WHERE 
          arg1 -> key <> arg2 -> key 
          OR arg2 -> key IS NULL;

        $$ LANGUAGE SQL;
    SQL

    execute <<~SQL
      CREATE OR REPLACE FUNCTION logidze_logger() RETURNS TRIGGER AS $body$
        DECLARE
          changes jsonb;
          new_v integer;
          ts bigint;
          size integer;
          history_limit integer;
          current_version integer;
          merged jsonb;
          iterator integer;
          item record;
        BEGIN
          ts := (extract(epoch from now()) * 1000)::bigint;

          IF TG_OP = 'INSERT' THEN
            changes := to_jsonb(NEW.*) - 'log_data';
            new_v := 1;

            NEW.log_data := json_build_object(
              'v',
              1,
              'h',
              jsonb_build_array(
                jsonb_build_object(
                  'ts',
                  ts,
                  'v',
                  new_v,
                  'c',
                  changes
                )
              )
            );
          ELSIF TG_OP = 'UPDATE' THEN
            history_limit := TG_ARGV[0];
            current_version := (NEW.log_data->>'v')::int;

            IF NEW = OLD THEN
              RETURN NEW;
            END IF;

            IF current_version < (NEW.log_data#>>'{h,-1,v}')::int THEN
              iterator := 0;
              FOR item in SELECT * FROM jsonb_array_elements(NEW.log_data->'h')
              LOOP
                IF (item.value->>'v')::int > current_version THEN
                  NEW.log_data := jsonb_set(
                    NEW.log_data,
                    '{h}',
                    (NEW.log_data->'h') - iterator
                  );
                END IF;
                iterator := iterator + 1;
              END LOOP;
            END IF;

            changes := jsonb_minus(row_to_json(NEW)::jsonb, row_to_json(OLD)::jsonb) - 'log_data';

            new_v := (NEW.log_data#>>'{h,-1,v}')::int + 1;

            size := jsonb_array_length(NEW.log_data->'h');

            NEW.log_data := jsonb_set(
              NEW.log_data,
              ARRAY['h', size::text],
              jsonb_build_object(
                'ts',
                ts,
                'v',
                new_v,
                'c',
                changes
              ),
              true
            );

            NEW.log_data := jsonb_set(
              NEW.log_data,
              '{v}',
              to_jsonb(new_v)
            );

            IF history_limit IS NOT NULL AND history_limit = size THEN
              merged := jsonb_build_object(
                'ts',
                NEW.log_data#>'{h,1,ts}',
                'v',
                NEW.log_data#>'{h,1,v}',
                'c',
                (NEW.log_data#>'{h,0,c}') || (NEW.log_data#>'{h,1,c}')
              );

              NEW.log_data := jsonb_set(
                NEW.log_data,
                '{h}',
                jsonb_set(
                  NEW.log_data->'h',
                  '{1}',
                  merged 
                ) - 0
              );
            END IF;
          END IF;

          return NEW;
        END;
        $body$
        LANGUAGE plpgsql;
    SQL
  end

  def down
    execute <<~SQL
      DROP FUNCTION logidze_logger() CASCADE;
    SQL
  end
end
