class <%= @migration_class_name %> < ActiveRecord::Migration
  def up
    execute <<-SQL
      DO $$
        BEGIN
        EXECUTE 'ALTER DATABASE ' || current_database() || ' SET logidze.disabled TO off';
        END;
      $$
      LANGUAGE plpgsql;
    SQL

    execute <<-SQL
      CREATE OR REPLACE FUNCTION logidze_snapshot(item jsonb) RETURNS jsonb AS $body$
        BEGIN
          return json_build_object(
            'v', 1,
            'h', jsonb_build_array(
                   jsonb_build_object(
                     'ts',
                     (extract(epoch from now()) * 1000)::bigint,
                     'v',
                     1,
                     'c',
                     item - 'log_data'
                   )
                 )
            );
        END;
      $body$
      LANGUAGE plpgsql;

      CREATE OR REPLACE FUNCTION logidze_compact_history(log_data jsonb) RETURNS jsonb AS $body$
        DECLARE
          merged jsonb;
        BEGIN
          merged := jsonb_build_object(
            'ts',
            log_data#>'{h,1,ts}',
            'v',
            log_data#>'{h,1,v}',
            'c',
            (log_data#>'{h,0,c}') || (log_data#>'{h,1,c}')
          );

          return jsonb_set(
            log_data,
            '{h}',
            jsonb_set(
              log_data->'h',
              '{1}',
              merged 
            ) - 0
          );
        END;
      $body$
      LANGUAGE plpgsql;

      CREATE OR REPLACE FUNCTION logidze_logger() RETURNS TRIGGER AS $body$
        DECLARE
          changes jsonb;
          new_v integer;
          ts bigint;
          size integer;
          history_limit integer;
          current_version integer;
          merged jsonb;
          iterator integer;
          item record;
        BEGIN

          IF TG_OP = 'INSERT' THEN

            NEW.log_data := logidze_snapshot(to_jsonb(NEW.*));
          
          ELSIF TG_OP = 'UPDATE' THEN
          
            IF OLD.log_data is NULL OR OLD.log_data = '{}'::jsonb THEN
              NEW.log_data := logidze_snapshot(to_jsonb(NEW.*));
              RETURN NEW;
            END IF;

            history_limit := TG_ARGV[0];
            current_version := (NEW.log_data->>'v')::int;

            IF NEW = OLD THEN
              RETURN NEW;
            END IF;

            ts := (extract(epoch from now()) * 1000)::bigint;

            IF current_version < (NEW.log_data#>>'{h,-1,v}')::int THEN
              iterator := 0;
              FOR item in SELECT * FROM jsonb_array_elements(NEW.log_data->'h')
              LOOP
                IF (item.value->>'v')::int > current_version THEN
                  NEW.log_data := jsonb_set(
                    NEW.log_data,
                    '{h}',
                    (NEW.log_data->'h') - iterator
                  );
                END IF;
                iterator := iterator + 1;
              END LOOP;
            END IF;

            changes := hstore_to_jsonb_loose(
              hstore(NEW.*) - hstore(OLD.*)
            ) - 'log_data';

            new_v := (NEW.log_data#>>'{h,-1,v}')::int + 1;

            size := jsonb_array_length(NEW.log_data->'h');

            NEW.log_data := jsonb_set(
              NEW.log_data,
              ARRAY['h', size::text],
              jsonb_build_object(
                'ts',
                ts,
                'v',
                new_v,
                'c',
                changes
              ),
              true
            );

            NEW.log_data := jsonb_set(
              NEW.log_data,
              '{v}',
              to_jsonb(new_v)
            );

            IF history_limit IS NOT NULL AND history_limit = size THEN
              NEW.log_data := logidze_compact_history(NEW.log_data);
            END IF;
          END IF;

          return NEW;
        END;
        $body$
        LANGUAGE plpgsql;
    SQL
  end

  def down
    execute <<-SQL
      DROP FUNCTION logidze_compact_history(jsonb) CASCADE;
      DROP FUNCTION logidze_snapshot(jsonb) CASCADE;
      DROP FUNCTION logidze_logger() CASCADE;
    SQL
  end
end
